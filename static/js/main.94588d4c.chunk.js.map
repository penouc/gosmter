{"version":3,"sources":["picer/index.jsx","radios/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Picer","react_default","a","createElement","className","this","props","src","id","alt","Component","RadioGroup","Radio","Group","Radios","state","value","onChange","e","window","transforImg2Base","target","_this","setState","name","es_radio","App","radios_Radios","picer_Picer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94588d4c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Picer extends Component {\n  //   constructor() {\n  //     super();\n  //   }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div className=\"pic-wrap\">\n        {this.props.src ? (\n          <img\n            id={this.props.id}\n            className=\"pic-img\"\n            alt=\"pic\"\n            src={this.props.src}\n          />\n        ) : (\n          <img\n            id={this.props.id}\n            className=\"pic-img no-pic\"\n            alt=\"pic\"\n            // style={{ display: this.props.src ? \"inline\" : \"none\" }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Radio } from \"antd\";\n\nconst RadioGroup = Radio.Group;\n\nexport default class Radios extends Component {\n  state = {\n    value: \"resize\"\n  };\n\n  onChange = e => {\n    window.transforImg2Base(e.target.value);\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  render() {\n    return (\n      <RadioGroup\n        name=\"radiogroup\"\n        onChange={this.onChange}\n        value={this.state.value}\n      >\n        <Radio value={\"resize\"}>resize</Radio>\n        <Radio value={\"crop_to_size\"}>crop_to_size</Radio>\n        <Radio value={\"rotate_180\"}>rotate_180</Radio>\n        <Radio value={\"rotate_30\"}>rotate_30</Radio>\n        <Radio value={\"brightness_increase\"}>brightness_increase</Radio>{\" \"}\n        <Radio value={\"brightness_decrease\"}>brightness_decrease</Radio>{\" \"}\n        <Radio value={\"contrast_increase\"}>contrast_increase</Radio>\n        <Radio value={\"contrast_decrease\"}>contrast_decrease</Radio>\n        <Radio value={\"saturation_increase\"}>saturation_increase</Radio>{\" \"}\n        <Radio value={\"saturation_decrease\"}>saturation_decrease</Radio>{\" \"}\n        <Radio value={\"gamma_1.5\"}>gamma_1.5</Radio>\n        <Radio value={\"gamma_0.5\"}>gamma_0.5</Radio>\n        <Radio value={\"gaussian_blur\"}>gaussian_blur</Radio>\n        <Radio value={\"unsharp_mask\"}>unsharp_mask</Radio>\n        <Radio value={\"sigmoid\"}>sigmoid</Radio>\n        <Radio value={\"pixelate\"}>pixelate</Radio>\n        <Radio value={\"colorize\"}>colorize</Radio>\n        <Radio value={\"grayscale\"}>grayscale</Radio>\n        <Radio value={\"sepia\"}>sepia</Radio>\n        <Radio value={\"invert\"}>invert</Radio>\n        <Radio value={\"mean\"}>mean</Radio>\n        <Radio value={\"median\"}>median</Radio>\n        <Radio value={\"minimum\"}>minimum</Radio>\n        <Radio value={\"maximum\"}>maximum</Radio>\n        <Radio value={\"hue_rotate\"}>hue_rotate</Radio>\n        <Radio value={\"color_balance\"}>color_balance</Radio>\n      </RadioGroup>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Picer from \"./picer\";\nimport Radios from \"./radios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Gosmter&nbsp;\n            <span className=\"header-sec-title\">( Based on Go gift )</span>\n          </p>\n        </header>\n        <div className=\"main-content\">\n          <div className=\"filter-select\">\n            <Radios />\n          </div>\n          <Picer id=\"pic-origin\" src=\"./images/src.jpg\" />\n          <Picer id=\"pic-target\" src=\"\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}